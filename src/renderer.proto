syntax = "proto3";

import "common.proto";
import "scene.proto";
import "engine_interface.proto";

package decentraland.renderer;

option csharp_namespace = "DCL.Interface";

message MessageFromRenderer {
  oneof message {
    ReportPosition report_position = 1;
    ReportMousePosition report_mouse_position = 2;
    SceneEvent scene_event = 3;
    LegacySceneEvent legacy_scene_event = 4;
    SceneEvent all_scenes_event = 5;
    LegacySceneEvent all_scenes_legacy_event = 6;
    OpenWebURL open_web_url = 7;
    PerformanceReport performance_report = 8;
    SystemInfoReport system_info_report = 9;
    TrackAnalyticsEvent track_analytics_event = 10;
    TriggerExpression trigger_expression = 11;
    MotdConfirmClicked message_of_the_day_confirm_clicked = 12;

    LogOut logout = 16;
    RedirectToSignUp redirect_to_signup = 17;

    SaveAvatar save_avatar = 18;
    CloseUserAvatar close_user_avatar = 21;
    SaveUserTutorialStep save_tutorial_step = 22;

    // FKA SendScreenshot
    ScreenshotResponse screenshot_response = 23;

    // FKA ReportBuilderCameraTarget
    BuilderRaycastResponse builder_raycast_response = 24;

    UserAcceptedCollectibles user_accepted_collectibles = 25;
    SetDelightedSurveyEnabled set_delighted_survey_enabled = 26;

    // FKA ReportScene,ReportPlayer
    ReportContent report_content = 27;

    BlockPlayer block_player = 28;
    UnblockPlayer unblock_player = 29;

    RequestScenesInfoInArea request_scenes_info_in_area = 30;
    SetAudioStream set_audio_stream = 31;
    ChatMessage send_chat_message = 32;
    SetVoiceChatRecording set_voice_recording = 33;

    //  WHY DO WE HAVE BOTH SetVoiceChatRecording and ToggleVoiceChatRecording?? TODO = 0;
    ToggleVoiceChatRecording toggle_voice_recording = 34;

    // FKA ApplySettings
    SetVoiceChatSettings set_voice_chat_settings = 35;

    UpdateFriendshipStatus update_friendship_status = 36;
    FindEnsOwner find_ens_owner = 37;

    ScenesLoadingFeedback scenes_loading_feedback = 39;

    FetchHotScenes fetch_hot_scenes = 40;
    SetBaseResolution set_base_resolution = 41;
    RequestGIFProcessor request_gif_processor = 42;
    DeleteGif delete_gif = 43;
    FetchManaBalance fetch_mana_balance = 44;
    MuteUsers mute_users = 45;
    KillPortableExperience kill_portable_experience = 46;
    RequestWearables request_wearables = 47;
    RequestProfile request_profile = 48;
    ReportAvatarFatalError report_avatar_fatal_error = 49;
  }

  message ReportAvatarFatalError {}

  message SaveUserTutorialStep {
    int32 tutorial_step = 1;
  }

  message RequestProfile {
    string user_id = 1;
  }
  
  message KillPortableExperience {
    string scene_id = 1;
  }
  message MuteUsers {
    bool mute = 1;
    repeated string users = 2;
  }
  message FetchManaBalance {}

  message SetBaseResolution {
    int32 base_resolution = 1;
  }

  message FetchHotScenes {}

  message ScenesLoadingFeedback {
    string message = 1;
    float loading_percentage = 2;
  }

  message FindEnsOwner {
    string ens = 1;
    int32 max_results = 2;
  }

  message UpdateFriendshipStatus {
    string user_id = 1;
    FriendshipAction action = 2;
  }

  message SetVoiceChatSettings {
    float voice_chat_volume = 1;
    float voice_chat_allow_category = 2;
  }



  message SetAudioStream {
    string url = 1;
    bool play = 2;
    float volume = 3;
  }

  message RequestScenesInfoInArea {
    int32 x = 1;
    int32 y = 2;
    reserved 3;
    int32 radius = 4;
  }

  /** Triggered when the camera moves */
  message ReportPosition {
    common.Vector3 position = 1;
    common.Quaternion rotation = 2;
    float player_height = 3;
    bool immediate = 4;
  }

  message LegacySceneEvent {
    string scene_id = 1;
    string event_name = 2;
    string json_payload = 3;
  }

  message SceneEvent {
    string scene_id = 1;
    oneof scene_event {
      EntityOutOfBoundaries entities_out_of_boundaries = 2;
      // TODO: add all the IEvents that we send to the scenes here
    }

    message EntityOutOfBoundaries {
      repeated string entities = 1;
    }
  }

  message OpenWebURL {
    string url = 1;
  }

  message PerformanceReport {
    string samples = 1;
    bool fps_is_capped = 2;
    int32 hiccups_in_thousand_frames = 3;
    int32 hiccups_time = 4;
    int32 total_time = 5;
  }

  message SystemInfoReport {
    string graphics_device_name = 1;
    string graphics_device_version = 2;
    int32 graphics_memory_size = 3;
    string processor_type = 4;
    int32 processor_count = 5;
    int32 system_memory_size = 6;
  }

  message TrackAnalyticsEvent {
    string event_name = 1;
    map<string, string> properties = 2;
  }

  message TriggerExpression {
    string expression_id = 1;
    int32 timestamp = 2;
  }

  message MotdConfirmClicked {}


  message LogOut {}

  message RedirectToSignUp {}



  message RequestOwnProfileUpdate {}
  message SaveUserUnverifiedName {
    string name = 1;
  }


  message ScreenshotResponse {
    string id = 1;
    bytes image_data = 2;
  }

  message BuilderRaycastResponse {
    string request_id = 1;
    common.Vector3 position = 2;
  }

  message UserAcceptedCollectibles {
    string collectible_id = 1;
  }
  message SetDelightedSurveyEnabled {
    bool enabled = 1;
  }
  message ReportContent {
    string scene_id = 1;
    string user_id = 2;
  }
  message BlockPlayer {
    string user_id = 1;
  }
  message UnblockPlayer {
    string user_id = 1;
  }
}


message MessageToRenderer {
  oneof message {

    decentraland.renderer.engine.SceneMessage send_scene_message = 1;

    DumpScenesLoadInfo dump_scenes_load_info = 5;
    DumpRendererLockersInfo dump_render_lockers_info = 6;
    CreateGlobalScene create_global_scene = 7;
    LoadParcelScenes load_parcel_scene = 8;
    UpdateParcelScenes update_parcel_scenes = 9;
    UnloadScene unload_scene = 10;

    SetBuilderReady set_builder_ready = 21;

    WearablesRequestFailed wearable_request_failed = 24;

    ShowNotification show_notification = 27 ;
    ConfigureHUDElement configure_hud_element = 28 ;
    ShowWelcomeNotification show_welcome_notification = 29 ;
    TriggerSelfUserExpression trigger_self_user_expression = 30 ;
    UpdateMinimapSceneInformation update_minimap_scene_information = 31 ;
    SetTutorialEnabled set_tutorial_enabled = 32 ;
    SetTutorialEnabledForUsersThatAlreadyDidTheTutorial set_tutorial_enabled_for_users_that_already_did_the_tutorial = 33 ;
    AddMessageToChatWindow add_message_to_chat_window = 35 ;
    InitializeFriends initialize_friends = 36 ;
    UpdateFriendshipStatus update_friendship_status = 37 ;
    UpdateUserPresence update_user_presence = 38 ;
    FriendNotFound friend_not_found = 39 ;
    RequestTeleport request_teleport = 40 ;
    UpdateHotScenesList update_hot_scenes_list = 41 ;
    SendGIFPointers send_gif_pointers = 42 ;
    SendGIFFetchFailure send_gif_fetch_failure = 43 ;
    ConfigureEmailPrompt configure_email_prompt = 44 ;
    ConfigureTutorial configure_tutorial = 45 ;
    UpdateBalanceOfMANA update_balance_of_mana = 46 ;
    SetPlayerTalking set_player_talking = 47 ;
    ShowAvatarEditorInSignIn show_avatar_editor_in_sign_in = 48 ;
    SetUserTalking set_user_talking = 49 ;
    SetUsersMuted set_users_muted = 50 ;
    SetVoiceChatEnabledByScene set_voice_chat_enabled_by_scene = 51 ;
    SetKernelConfiguration set_kernel_configuration = 52 ;
    UpdateRealmsInfo update_realms_info = 53 ;
    SendPublishSceneResult send_publish_scene_result = 54 ;
    SetENSOwnerQueryResult set_ens_owner_query_result = 55 ;

    SelectGizmoBuilder select_gizmo_builder = 57 ;
    ResetBuilderObject reset_builder_object = 58 ;
    SetCameraZoomDeltaBuilder set_camera_zoom_delta_builder = 59 ;
    GetCameraTargetBuilder get_camera_target_builder = 60 ;
    SetPlayModeBuilder set_play_mode_builder = 61 ;
    PreloadFileBuilder preload_file_builder = 62 ;
    GetMousePositionBuilder get_mouse_position_builder = 63 ;
    TakeScreenshotBuilder take_screenshot_builder = 64 ;
    SetCameraPositionBuilder set_camera_position_builder = 65 ;
    SetCameraRotationBuilder set_camera_rotation_builder = 66 ;
    ResetCameraZoomBuilder reset_camera_zoom_builder = 67 ;
    SetBuilderGridResolution set_builder_grid_resolution = 68 ;
    SetBuilderSelectedEntities set_builder_selected_entities = 69 ;
    ResetBuilderScene reset_builder_scene = 70 ;
    OnBuilderKeyDown on_builder_key_down = 71 ;
    SetBuilderConfiguration set_builder_configuration = 72 ;
  }

  message SetDisableAssetBundles {}
  message ReportFocusOn {}
  message ReportFocusOff {}

  message SetBuilderReady {}
  message AddUserProfileToCatalog {
    ProfileForRenderer profile = 1;
  }



  message ShowWelcomeNotification {}
  message ShowAvatarEditorInSignIn {}
  message ResetBuilderScene {}
  message ResetCameraZoomBuilder {}
  message ResetBuilderObject {}

  message ShowNotification {
    message Notification {
      NotificationType type = 1;
      string message = 2;
      string button_message = 3;
      int32 timer = 4; // in seconds
      string scene = 5;
      string external_callback_id = 6;
    }
    Notification notification = 1;
  }
  message ConfigureHUDElement {

  }
  message TriggerSelfUserExpression {
    string expression_id = 1;
  }
  message UpdateMinimapSceneInformation {
    message MinimapSceneInfo {
      string name = 1;
      string owner = 2;
      string description = 3;
      optional string preview_image_url = 4;
      int32 type = 5;
      repeated decentraland.scene.ParcelPosition parcels = 6;
      bool is_poi = 7;
    }
    repeated MinimapSceneInfo info = 1;
  }

  message TutorialInitializationMessage {
    bool from_deep_link = 1;
    bool enable_new_tutorial_camera = 2;
  }

  message SetTutorialEnabled {
    TutorialInitializationMessage tutorial_config = 1;
  }
  message SetTutorialEnabledForUsersThatAlreadyDidTheTutorial {
    TutorialInitializationMessage tutorial_config = 1;
  }


  message RequestTeleport {
    string destination = 1;
  }
  message UpdateHotScenesList {
    message HotSceneInfo {
      string id = 1;
      string name = 2;
      string creator = 3;
      string description = 4;
      string thumbnail = 5;
      decentraland.scene.ParcelPosition base_coord = 6;
      repeated decentraland.scene.ParcelPosition parcels = 7;
      int32 users_total_count = 8;
      repeated RealmInfo realms = 9;
    }
    repeated HotSceneInfo info = 1;
  }
  message ConfigureEmailPrompt {
    int32 tutorial_step = 1;
  }
  message ConfigureTutorial {
    int32 tutorial_step = 1;
    TutorialInitializationMessage tutorial_config = 2;
  }
  message UpdateBalanceOfMANA {
    string balance = 1;
  }
  message SetPlayerTalking {
    bool talking = 2;
  }
  message SetUserTalking {
    string user_id = 1;
    bool talking = 2;
  }
  message SetUsersMuted {
    repeated string user_id = 1;
    bool muted = 2;
  }
  message SetVoiceChatEnabledByScene {
    bool enabled = 1;
  }
  message SetKernelConfiguration {
    int32 comm_radius = 1;
    bool voice_chat_enabled = 2;
    string name_valid_regex = 3;
    string name_valid_character_regex = 4;
    bool enable_builder_in_world = 5;
    bool gif_supported = 6;
    string tld = 7;
  }
  message RealmInfo {
    string layer = 1;
    string server_name = 2;
    string url = 3;
    int32 users_count = 4;
    int32 users_max = 5;
    repeated decentraland.scene.ParcelPosition user_parcels = 6;
  }
  message UpdateRealmsInfo {
    message CurrentRealmInfoForRenderer {
      string layer = 1;
      string server_name = 2;
      string domain = 3;
      string content_server_url = 4;
    }
    CurrentRealmInfoForRenderer current = 1;
    repeated RealmInfo realms = 2;
  }
  message SendPublishSceneResult {
    bool ok = 1;
    optional string error = 2;
  }
  message SetENSOwnerQueryResult {
    string search_input = 1;
    bool success = 2;
    repeated ProfileForRenderer profiles = 3;
  }
  message SelectGizmoBuilder {
    string type = 1;
  }
  message SetCameraZoomDeltaBuilder {
    float delta = 1;
  }
  message GetCameraTargetBuilder {
    string future_id = 1;
  }
  message SetPlayModeBuilder {
    string on = 1;
  }
  message PreloadFileBuilder {
    string url = 1;
  }
  message GetMousePositionBuilder {
    float x = 1;
    float y = 2;
    string id = 3;
  }
  message TakeScreenshotBuilder {
    string id = 1;
  }

  message SetCameraPositionBuilder {
    common.Vector3 position = 1;
  }

  message SetCameraRotationBuilder {
    float aplha = 1;
    float beta = 2;
  }

  message SetBuilderGridResolution {
    float position = 1;
    float rotation = 2;
    float scale = 3;
  }

  message SetBuilderSelectedEntities {
    repeated string entities = 1;
  }

  message OnBuilderKeyDown {
    string key = 1;
  }

  message SetBuilderConfiguration {
    float camera_zoom_min = 1;
    float camera_zoom_max = 2;
    float camera_zoom_default = 3;
    bool disable_floor = 4;
  }

  message SetCursorState {
    bool locked = 1;
  }

  message SetEngineDebugPanel {}
  message HideFPSPanel {}
  message ShowFPSPanel {}
  message SetSceneDebugPanel {}

  message UnloadScene {
    string scene_id = 1;
  }

  message LoadParcelScenes {
    repeated decentraland.scene.ParcelScene parcel_scenes = 1;
  }

  message UpdateParcelScenes {
    repeated decentraland.scene.ParcelScene parcel_scenes = 1;
  }

  message CreateGlobalScene {
    string scene_id = 1;
    string name = 2;
    string base_url = 3;
    repeated decentraland.scene.ContentMapping mappings = 4;
    string icon = 5;
    bool is_portable_experience = 6;
  }

  message DumpScenesLoadInfo {}
  message DumpRendererLockersInfo {}

  message SetRenderProfile {
    string render_profile_id = 1;
  }

  message ProfileForRenderer {
    // TODO fill
  }

  message SetDebug {}
  message LoadProfile {
    ProfileForRenderer profile = 1;
  }
}

enum NotificationType {
  NotificationType_GENERIC = 0;
  NotificationType_SCRIPTING_ERROR = 1;
  NotificationType_COMMS_ERROR = 2;
}

enum PresenceStatus {
  PresenceStatus_NONE = 0;
  PresenceStatus_OFFLINE = 1;
  PresenceStatus_ONLINE = 2;
  PresenceStatus_UNAVAILABLE = 3;
}

enum ChatMessageType {
  ChatMessageType_NONE = 0;
  ChatMessageType_PUBLIC = 1;
  ChatMessageType_PRIVATE = 2;
  ChatMessageType_SYSTEM = 3;
}

enum FriendshipAction {
  FriendshipAction_NONE = 0;
  FriendshipAction_APPROVED = 1;
  FriendshipAction_REJECTED = 2;
  FriendshipAction_CANCELED = 3;
  FriendshipAction_REQUESTED_FROM = 4;
  FriendshipAction_REQUESTED_TO = 5;
  FriendshipAction_DELETED = 6;
}

message ChatMessage {
  string message_id = 1;
  ChatMessageType message_type = 2;
  string sender = 3;
  string recipient = 4;
  int32 timestamp = 5;
  string body = 6;
}